/* Generated by: ParserGeneratorCC: Do not edit this line. CypherConstants.java */
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [https://neo4j.com]
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.neo4j.cypher.internal.parser.javacc;


/**
 * Token literal values and constants.
 * Generated by com.helger.pgcc.output.java.OtherFilesGenJava#start()
 */
public interface CypherConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 29;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 32;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 33;
  /** RegularExpression Id. */
  int DECIMAL_DOUBLE = 35;
  /** RegularExpression Id. */
  int UNSIGNED_DECIMAL_INTEGER = 36;
  /** RegularExpression Id. */
  int DECIMAL_EXPONENT = 37;
  /** RegularExpression Id. */
  int INTEGER_PART = 38;
  /** RegularExpression Id. */
  int UNSIGNED_HEX_INTEGER = 39;
  /** RegularExpression Id. */
  int UNSIGNED_OCTAL_INTEGER = 40;
  /** RegularExpression Id. */
  int STRING1_OPEN = 41;
  /** RegularExpression Id. */
  int STRING_LITERAL1 = 52;
  /** RegularExpression Id. */
  int STRING2_OPEN = 53;
  /** RegularExpression Id. */
  int STRING_LITERAL2 = 64;
  /** RegularExpression Id. */
  int ESCAPED_SYMBOLIC_NAME_OPEN = 65;
  /** RegularExpression Id. */
  int ESCAPED_SYMBOLIC_NAME = 68;
  /** RegularExpression Id. */
  int ACCESS = 69;
  /** RegularExpression Id. */
  int ACTIVE = 70;
  /** RegularExpression Id. */
  int ADMIN = 71;
  /** RegularExpression Id. */
  int ADMINISTRATOR = 72;
  /** RegularExpression Id. */
  int ALIAS = 73;
  /** RegularExpression Id. */
  int ALIASES = 74;
  /** RegularExpression Id. */
  int ALL_SHORTEST_PATH = 75;
  /** RegularExpression Id. */
  int ALL = 76;
  /** RegularExpression Id. */
  int ALTER = 77;
  /** RegularExpression Id. */
  int AND = 78;
  /** RegularExpression Id. */
  int ANY = 79;
  /** RegularExpression Id. */
  int ARRAY = 80;
  /** RegularExpression Id. */
  int AS = 81;
  /** RegularExpression Id. */
  int ASC = 82;
  /** RegularExpression Id. */
  int ASCENDING = 83;
  /** RegularExpression Id. */
  int ASSERT = 84;
  /** RegularExpression Id. */
  int ASSIGN = 85;
  /** RegularExpression Id. */
  int AT = 86;
  /** RegularExpression Id. */
  int AUTH = 87;
  /** RegularExpression Id. */
  int BAR = 88;
  /** RegularExpression Id. */
  int BINDINGS = 89;
  /** RegularExpression Id. */
  int BOOL = 90;
  /** RegularExpression Id. */
  int BOOLEAN = 91;
  /** RegularExpression Id. */
  int BOOSTED = 92;
  /** RegularExpression Id. */
  int BOTH = 93;
  /** RegularExpression Id. */
  int BREAK = 94;
  /** RegularExpression Id. */
  int BRIEF = 95;
  /** RegularExpression Id. */
  int BTREE = 96;
  /** RegularExpression Id. */
  int BUILT = 97;
  /** RegularExpression Id. */
  int BY = 98;
  /** RegularExpression Id. */
  int CALL = 99;
  /** RegularExpression Id. */
  int CASE = 100;
  /** RegularExpression Id. */
  int CHANGE = 101;
  /** RegularExpression Id. */
  int CIDR = 102;
  /** RegularExpression Id. */
  int COLLECT = 103;
  /** RegularExpression Id. */
  int COLON = 104;
  /** RegularExpression Id. */
  int COLONCOLON = 105;
  /** RegularExpression Id. */
  int COMMA = 106;
  /** RegularExpression Id. */
  int COMMAND = 107;
  /** RegularExpression Id. */
  int COMMANDS = 108;
  /** RegularExpression Id. */
  int COMMIT = 109;
  /** RegularExpression Id. */
  int COMPOSITE = 110;
  /** RegularExpression Id. */
  int CONCURRENT = 111;
  /** RegularExpression Id. */
  int CONSTRAINT = 112;
  /** RegularExpression Id. */
  int CONSTRAINTS = 113;
  /** RegularExpression Id. */
  int CONTAINS = 114;
  /** RegularExpression Id. */
  int COPY = 115;
  /** RegularExpression Id. */
  int CONTINUE = 116;
  /** RegularExpression Id. */
  int COUNT = 117;
  /** RegularExpression Id. */
  int CREATE = 118;
  /** RegularExpression Id. */
  int CSV = 119;
  /** RegularExpression Id. */
  int CURRENT = 120;
  /** RegularExpression Id. */
  int DATA = 121;
  /** RegularExpression Id. */
  int DATABASE = 122;
  /** RegularExpression Id. */
  int DATABASES = 123;
  /** RegularExpression Id. */
  int DATE = 124;
  /** RegularExpression Id. */
  int DATETIME = 125;
  /** RegularExpression Id. */
  int DBMS = 126;
  /** RegularExpression Id. */
  int DEALLOCATE = 127;
  /** RegularExpression Id. */
  int DEFAULT_TOKEN = 128;
  /** RegularExpression Id. */
  int DEFINED = 129;
  /** RegularExpression Id. */
  int DELETE = 130;
  /** RegularExpression Id. */
  int DENY = 131;
  /** RegularExpression Id. */
  int DESC = 132;
  /** RegularExpression Id. */
  int DESCENDING = 133;
  /** RegularExpression Id. */
  int DESTROY = 134;
  /** RegularExpression Id. */
  int DETACH = 135;
  /** RegularExpression Id. */
  int DOLLAR = 136;
  /** RegularExpression Id. */
  int DOUBLEBAR = 137;
  /** RegularExpression Id. */
  int DIFFERENT = 138;
  /** RegularExpression Id. */
  int DISTINCT = 139;
  /** RegularExpression Id. */
  int DIVIDE = 140;
  /** RegularExpression Id. */
  int DOT = 141;
  /** RegularExpression Id. */
  int DOTDOT = 142;
  /** RegularExpression Id. */
  int DRIVER = 143;
  /** RegularExpression Id. */
  int DROP = 144;
  /** RegularExpression Id. */
  int DRYRUN = 145;
  /** RegularExpression Id. */
  int DUMP = 146;
  /** RegularExpression Id. */
  int DURATION = 147;
  /** RegularExpression Id. */
  int EACH = 148;
  /** RegularExpression Id. */
  int EDGE = 149;
  /** RegularExpression Id. */
  int ENABLE = 150;
  /** RegularExpression Id. */
  int ELEMENT = 151;
  /** RegularExpression Id. */
  int ELEMENTS = 152;
  /** RegularExpression Id. */
  int ELSE = 153;
  /** RegularExpression Id. */
  int ENCRYPTED = 154;
  /** RegularExpression Id. */
  int END = 155;
  /** RegularExpression Id. */
  int ENDS = 156;
  /** RegularExpression Id. */
  int EQ = 157;
  /** RegularExpression Id. */
  int EXECUTABLE = 158;
  /** RegularExpression Id. */
  int EXECUTE = 159;
  /** RegularExpression Id. */
  int EXIST = 160;
  /** RegularExpression Id. */
  int EXISTENCE = 161;
  /** RegularExpression Id. */
  int EXISTS = 162;
  /** RegularExpression Id. */
  int ERROR = 163;
  /** RegularExpression Id. */
  int FAIL = 164;
  /** RegularExpression Id. */
  int FALSE = 165;
  /** RegularExpression Id. */
  int FIELDTERMINATOR = 166;
  /** RegularExpression Id. */
  int FINISH = 167;
  /** RegularExpression Id. */
  int FLOAT = 168;
  /** RegularExpression Id. */
  int FOR = 169;
  /** RegularExpression Id. */
  int FOREACH = 170;
  /** RegularExpression Id. */
  int FROM = 171;
  /** RegularExpression Id. */
  int FULLTEXT = 172;
  /** RegularExpression Id. */
  int FUNCTION = 173;
  /** RegularExpression Id. */
  int FUNCTIONS = 174;
  /** RegularExpression Id. */
  int GE = 175;
  /** RegularExpression Id. */
  int GRANT = 176;
  /** RegularExpression Id. */
  int GRAPH = 177;
  /** RegularExpression Id. */
  int GRAPHS = 178;
  /** RegularExpression Id. */
  int GROUP = 179;
  /** RegularExpression Id. */
  int GROUPS = 180;
  /** RegularExpression Id. */
  int GT = 181;
  /** RegularExpression Id. */
  int HEADERS = 182;
  /** RegularExpression Id. */
  int HOME = 183;
  /** RegularExpression Id. */
  int ID = 184;
  /** RegularExpression Id. */
  int IF = 185;
  /** RegularExpression Id. */
  int IMPERSONATE = 186;
  /** RegularExpression Id. */
  int IMMUTABLE = 187;
  /** RegularExpression Id. */
  int IN = 188;
  /** RegularExpression Id. */
  int INDEX = 189;
  /** RegularExpression Id. */
  int INDEXES = 190;
  /** RegularExpression Id. */
  int INF = 191;
  /** RegularExpression Id. */
  int INFINITY = 192;
  /** RegularExpression Id. */
  int INSERT = 193;
  /** RegularExpression Id. */
  int INT = 194;
  /** RegularExpression Id. */
  int INTEGER = 195;
  /** RegularExpression Id. */
  int IS = 196;
  /** RegularExpression Id. */
  int JOIN = 197;
  /** RegularExpression Id. */
  int KEY = 198;
  /** RegularExpression Id. */
  int LABEL = 199;
  /** RegularExpression Id. */
  int LABELS = 200;
  /** RegularExpression Id. */
  int AMPERSAND = 201;
  /** RegularExpression Id. */
  int EXCLAMATION_MARK = 202;
  /** RegularExpression Id. */
  int LBRACKET = 203;
  /** RegularExpression Id. */
  int LCURLY = 204;
  /** RegularExpression Id. */
  int LE = 205;
  /** RegularExpression Id. */
  int LEADING = 206;
  /** RegularExpression Id. */
  int LIMITROWS = 207;
  /** RegularExpression Id. */
  int LIST = 208;
  /** RegularExpression Id. */
  int LOAD = 209;
  /** RegularExpression Id. */
  int LOCAL = 210;
  /** RegularExpression Id. */
  int LOOKUP = 211;
  /** RegularExpression Id. */
  int LPAREN = 212;
  /** RegularExpression Id. */
  int LT = 213;
  /** RegularExpression Id. */
  int MANAGEMENT = 214;
  /** RegularExpression Id. */
  int MAP = 215;
  /** RegularExpression Id. */
  int MATCH = 216;
  /** RegularExpression Id. */
  int MERGE = 217;
  /** RegularExpression Id. */
  int MINUS = 218;
  /** RegularExpression Id. */
  int PERCENT = 219;
  /** RegularExpression Id. */
  int NEQ = 220;
  /** RegularExpression Id. */
  int NEQ2 = 221;
  /** RegularExpression Id. */
  int NAME = 222;
  /** RegularExpression Id. */
  int NAMES = 223;
  /** RegularExpression Id. */
  int NAN = 224;
  /** RegularExpression Id. */
  int NFC = 225;
  /** RegularExpression Id. */
  int NFD = 226;
  /** RegularExpression Id. */
  int NFKC = 227;
  /** RegularExpression Id. */
  int NFKD = 228;
  /** RegularExpression Id. */
  int NEW = 229;
  /** RegularExpression Id. */
  int NODE = 230;
  /** RegularExpression Id. */
  int NODETACH = 231;
  /** RegularExpression Id. */
  int NODES = 232;
  /** RegularExpression Id. */
  int NONE = 233;
  /** RegularExpression Id. */
  int NORMALIZE = 234;
  /** RegularExpression Id. */
  int NORMALIZED = 235;
  /** RegularExpression Id. */
  int NOT = 236;
  /** RegularExpression Id. */
  int NOTHING = 237;
  /** RegularExpression Id. */
  int NOWAIT = 238;
  /** RegularExpression Id. */
  int NULL = 239;
  /** RegularExpression Id. */
  int OF = 240;
  /** RegularExpression Id. */
  int ON = 241;
  /** RegularExpression Id. */
  int ONLY = 242;
  /** RegularExpression Id. */
  int OPTIONAL = 243;
  /** RegularExpression Id. */
  int OPTIONS = 244;
  /** RegularExpression Id. */
  int OPTION = 245;
  /** RegularExpression Id. */
  int OR = 246;
  /** RegularExpression Id. */
  int ORDER = 247;
  /** RegularExpression Id. */
  int OUTPUT = 248;
  /** RegularExpression Id. */
  int PASSWORD = 249;
  /** RegularExpression Id. */
  int PASSWORDS = 250;
  /** RegularExpression Id. */
  int PATH = 251;
  /** RegularExpression Id. */
  int PATHS = 252;
  /** RegularExpression Id. */
  int PERIODIC = 253;
  /** RegularExpression Id. */
  int PLAINTEXT = 254;
  /** RegularExpression Id. */
  int PLUS = 255;
  /** RegularExpression Id. */
  int PLUSEQUAL = 256;
  /** RegularExpression Id. */
  int POINT = 257;
  /** RegularExpression Id. */
  int POPULATED = 258;
  /** RegularExpression Id. */
  int POW = 259;
  /** RegularExpression Id. */
  int REPEATABLE = 260;
  /** RegularExpression Id. */
  int PRIMARY = 261;
  /** RegularExpression Id. */
  int PRIMARIES = 262;
  /** RegularExpression Id. */
  int PRIVILEGE = 263;
  /** RegularExpression Id. */
  int PRIVILEGES = 264;
  /** RegularExpression Id. */
  int PROCEDURE = 265;
  /** RegularExpression Id. */
  int PROCEDURES = 266;
  /** RegularExpression Id. */
  int PROPERTIES = 267;
  /** RegularExpression Id. */
  int PROPERTY = 268;
  /** RegularExpression Id. */
  int PROVIDER = 269;
  /** RegularExpression Id. */
  int PROVIDERS = 270;
  /** RegularExpression Id. */
  int QUESTION = 271;
  /** RegularExpression Id. */
  int RANGE = 272;
  /** RegularExpression Id. */
  int RBRACKET = 273;
  /** RegularExpression Id. */
  int RCURLY = 274;
  /** RegularExpression Id. */
  int READ = 275;
  /** RegularExpression Id. */
  int REALLOCATE = 276;
  /** RegularExpression Id. */
  int REDUCE = 277;
  /** RegularExpression Id. */
  int RENAME = 278;
  /** RegularExpression Id. */
  int REGEQ = 279;
  /** RegularExpression Id. */
  int REL = 280;
  /** RegularExpression Id. */
  int RELATIONSHIP = 281;
  /** RegularExpression Id. */
  int RELATIONSHIPS = 282;
  /** RegularExpression Id. */
  int REMOVE = 283;
  /** RegularExpression Id. */
  int REPLACE = 284;
  /** RegularExpression Id. */
  int REPORT = 285;
  /** RegularExpression Id. */
  int REQUIRE = 286;
  /** RegularExpression Id. */
  int REQUIRED = 287;
  /** RegularExpression Id. */
  int RETURN = 288;
  /** RegularExpression Id. */
  int REVOKE = 289;
  /** RegularExpression Id. */
  int ROLE = 290;
  /** RegularExpression Id. */
  int ROLES = 291;
  /** RegularExpression Id. */
  int ROW = 292;
  /** RegularExpression Id. */
  int ROWS = 293;
  /** RegularExpression Id. */
  int RPAREN = 294;
  /** RegularExpression Id. */
  int SCAN = 295;
  /** RegularExpression Id. */
  int SEC = 296;
  /** RegularExpression Id. */
  int SECOND = 297;
  /** RegularExpression Id. */
  int SECONDARY = 298;
  /** RegularExpression Id. */
  int SECONDARIES = 299;
  /** RegularExpression Id. */
  int SECONDS = 300;
  /** RegularExpression Id. */
  int SEEK = 301;
  /** RegularExpression Id. */
  int SEMICOLON = 302;
  /** RegularExpression Id. */
  int SERVER = 303;
  /** RegularExpression Id. */
  int SERVERS = 304;
  /** RegularExpression Id. */
  int SET = 305;
  /** RegularExpression Id. */
  int SETTING = 306;
  /** RegularExpression Id. */
  int SETTINGS = 307;
  /** RegularExpression Id. */
  int SHORTEST_PATH = 308;
  /** RegularExpression Id. */
  int SHORTEST = 309;
  /** RegularExpression Id. */
  int SHOW = 310;
  /** RegularExpression Id. */
  int SIGNED = 311;
  /** RegularExpression Id. */
  int SINGLE = 312;
  /** RegularExpression Id. */
  int SKIPROWS = 313;
  /** RegularExpression Id. */
  int START = 314;
  /** RegularExpression Id. */
  int STARTS = 315;
  /** RegularExpression Id. */
  int STATUS = 316;
  /** RegularExpression Id. */
  int STOP = 317;
  /** RegularExpression Id. */
  int STRING = 318;
  /** RegularExpression Id. */
  int SUPPORTED = 319;
  /** RegularExpression Id. */
  int SUSPENDED = 320;
  /** RegularExpression Id. */
  int TARGET = 321;
  /** RegularExpression Id. */
  int TERMINATE = 322;
  /** RegularExpression Id. */
  int TEXT = 323;
  /** RegularExpression Id. */
  int THEN = 324;
  /** RegularExpression Id. */
  int TIME = 325;
  /** RegularExpression Id. */
  int TIMES = 326;
  /** RegularExpression Id. */
  int TIMESTAMP = 327;
  /** RegularExpression Id. */
  int TIMEZONE = 328;
  /** RegularExpression Id. */
  int TO = 329;
  /** RegularExpression Id. */
  int TOPOLOGY = 330;
  /** RegularExpression Id. */
  int TRAILING = 331;
  /** RegularExpression Id. */
  int TRANSACTION = 332;
  /** RegularExpression Id. */
  int TRANSACTIONS = 333;
  /** RegularExpression Id. */
  int TRAVERSE = 334;
  /** RegularExpression Id. */
  int TRIM = 335;
  /** RegularExpression Id. */
  int TRUE = 336;
  /** RegularExpression Id. */
  int TYPE = 337;
  /** RegularExpression Id. */
  int TYPED = 338;
  /** RegularExpression Id. */
  int TYPES = 339;
  /** RegularExpression Id. */
  int UNION = 340;
  /** RegularExpression Id. */
  int UNIQUE = 341;
  /** RegularExpression Id. */
  int UNIQUENESS = 342;
  /** RegularExpression Id. */
  int UNWIND = 343;
  /** RegularExpression Id. */
  int URL = 344;
  /** RegularExpression Id. */
  int USE = 345;
  /** RegularExpression Id. */
  int USER = 346;
  /** RegularExpression Id. */
  int USERS = 347;
  /** RegularExpression Id. */
  int USING = 348;
  /** RegularExpression Id. */
  int VALUE = 349;
  /** RegularExpression Id. */
  int VARCHAR = 350;
  /** RegularExpression Id. */
  int VECTOR = 351;
  /** RegularExpression Id. */
  int VERBOSE = 352;
  /** RegularExpression Id. */
  int VERTEX = 353;
  /** RegularExpression Id. */
  int WAIT = 354;
  /** RegularExpression Id. */
  int WHEN = 355;
  /** RegularExpression Id. */
  int WHERE = 356;
  /** RegularExpression Id. */
  int WITH = 357;
  /** RegularExpression Id. */
  int WITHOUT = 358;
  /** RegularExpression Id. */
  int WRITE = 359;
  /** RegularExpression Id. */
  int XOR = 360;
  /** RegularExpression Id. */
  int YIELD = 361;
  /** RegularExpression Id. */
  int ZONE = 362;
  /** RegularExpression Id. */
  int ZONED = 363;
  /** RegularExpression Id. */
  int IDENTIFIER = 364;
  /** RegularExpression Id. */
  int LETTER = 365;
  /** RegularExpression Id. */
  int PART_LETTER = 366;
  /** RegularExpression Id. */
  int ARROW_LINE = 367;
  /** RegularExpression Id. */
  int ARROW_LEFT_HEAD = 368;
  /** RegularExpression Id. */
  int ARROW_RIGHT_HEAD = 369;
  /** RegularExpression Id. */
  int UNKNOWN = 370;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_FORMAL_COMMENT = 1;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 2;
  /** Lexical state. */
  int IN_SINGLE_LINE_COMMENT = 3;
  /** Lexical state. */
  int STRING1 = 4;
  /** Lexical state. */
  int STRING2 = 5;
  /** Lexical state. */
  int ESC_SYMB_NAME = 6;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\u000b\"",
    "\"\\f\"",
    "\"\\r\"",
    "\"\\u001c\"",
    "\"\\u001d\"",
    "\"\\u001e\"",
    "\"\\u001f\"",
    "\" \"",
    "\"\\u00a0\"",
    "\"\\u1680\"",
    "\"\\u2000\"",
    "\"\\u2001\"",
    "\"\\u2002\"",
    "\"\\u2003\"",
    "\"\\u2004\"",
    "\"\\u2005\"",
    "\"\\u2006\"",
    "\"\\u2007\"",
    "\"\\u2008\"",
    "\"\\u2009\"",
    "\"\\u200a\"",
    "\"\\u2028\"",
    "\"\\u2029\"",
    "\"\\u202f\"",
    "\"\\u205f\"",
    "\"\\u3000\"",
    "<SINGLE_LINE_COMMENT>",
    "<token of kind 30>",
    "\"/*\"",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 34>",
    "<DECIMAL_DOUBLE>",
    "<UNSIGNED_DECIMAL_INTEGER>",
    "<DECIMAL_EXPONENT>",
    "<INTEGER_PART>",
    "<UNSIGNED_HEX_INTEGER>",
    "<UNSIGNED_OCTAL_INTEGER>",
    "\"\\\'\"",
    "\"\\\\\\\\\"",
    "\"\\\\\\\'\"",
    "\"\\\\\\\"\"",
    "\"\\\\b\"",
    "\"\\\\f\"",
    "\"\\\\n\"",
    "\"\\\\r\"",
    "\"\\\\t\"",
    "\"\\\\u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]\"",
    "<token of kind 51>",
    "\"\\\'\"",
    "\"\\\"\"",
    "\"\\\\\\\\\"",
    "\"\\\\\\\'\"",
    "\"\\\\\\\"\"",
    "\"\\\\b\"",
    "\"\\\\f\"",
    "\"\\\\n\"",
    "\"\\\\r\"",
    "\"\\\\t\"",
    "\"\\\\u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]\"",
    "<token of kind 63>",
    "\"\\\"\"",
    "\"`\"",
    "<token of kind 66>",
    "\"``\"",
    "\"`\"",
    "\"ACCESS\"",
    "\"ACTIVE\"",
    "\"ADMIN\"",
    "\"ADMINISTRATOR\"",
    "\"ALIAS\"",
    "\"ALIASES\"",
    "\"allShortestPaths\"",
    "\"ALL\"",
    "\"ALTER\"",
    "\"AND\"",
    "\"ANY\"",
    "\"ARRAY\"",
    "\"AS\"",
    "\"ASC\"",
    "\"ASCENDING\"",
    "\"ASSERT\"",
    "\"ASSIGN\"",
    "\"AT\"",
    "\"AUTH\"",
    "\"|\"",
    "\"BINDINGS\"",
    "\"BOOL\"",
    "\"BOOLEAN\"",
    "\"BOOSTED\"",
    "\"BOTH\"",
    "\"BREAK\"",
    "\"BRIEF\"",
    "\"BTREE\"",
    "\"BUILT\"",
    "\"BY\"",
    "\"CALL\"",
    "\"CASE\"",
    "\"CHANGE\"",
    "\"CIDR\"",
    "\"COLLECT\"",
    "\":\"",
    "\"::\"",
    "\",\"",
    "\"COMMAND\"",
    "\"COMMANDS\"",
    "\"COMMIT\"",
    "\"COMPOSITE\"",
    "\"CONCURRENT\"",
    "\"CONSTRAINT\"",
    "\"CONSTRAINTS\"",
    "\"CONTAINS\"",
    "\"COPY\"",
    "\"CONTINUE\"",
    "\"COUNT\"",
    "\"CREATE\"",
    "\"CSV\"",
    "\"CURRENT\"",
    "\"DATA\"",
    "\"DATABASE\"",
    "\"DATABASES\"",
    "\"DATE\"",
    "\"DATETIME\"",
    "\"DBMS\"",
    "\"DEALLOCATE\"",
    "\"DEFAULT\"",
    "\"DEFINED\"",
    "\"DELETE\"",
    "\"DENY\"",
    "\"DESC\"",
    "\"DESCENDING\"",
    "\"DESTROY\"",
    "\"DETACH\"",
    "\"$\"",
    "\"||\"",
    "\"DIFFERENT\"",
    "\"DISTINCT\"",
    "\"/\"",
    "\".\"",
    "\"..\"",
    "\"DRIVER\"",
    "\"DROP\"",
    "\"DRYRUN\"",
    "\"DUMP\"",
    "\"DURATION\"",
    "\"EACH\"",
    "\"EDGE\"",
    "\"ENABLE\"",
    "\"ELEMENT\"",
    "\"ELEMENTS\"",
    "\"ELSE\"",
    "\"ENCRYPTED\"",
    "\"END\"",
    "\"ENDS\"",
    "\"=\"",
    "\"EXECUTABLE\"",
    "\"EXECUTE\"",
    "\"EXIST\"",
    "\"EXISTENCE\"",
    "\"EXISTS\"",
    "\"ERROR\"",
    "\"FAIL\"",
    "\"false\"",
    "\"FIELDTERMINATOR\"",
    "\"FINISH\"",
    "\"FLOAT\"",
    "\"FOR\"",
    "\"FOREACH\"",
    "\"FROM\"",
    "\"FULLTEXT\"",
    "\"FUNCTION\"",
    "\"FUNCTIONS\"",
    "\">=\"",
    "\"GRANT\"",
    "\"GRAPH\"",
    "\"GRAPHS\"",
    "\"GROUP\"",
    "\"GROUPS\"",
    "\">\"",
    "\"HEADERS\"",
    "\"HOME\"",
    "\"ID\"",
    "\"IF\"",
    "\"IMPERSONATE\"",
    "\"IMMUTABLE\"",
    "\"IN\"",
    "\"INDEX\"",
    "\"INDEXES\"",
    "\"INF\"",
    "\"INFINITY\"",
    "\"INSERT\"",
    "\"INT\"",
    "\"INTEGER\"",
    "\"IS\"",
    "\"JOIN\"",
    "\"KEY\"",
    "\"LABEL\"",
    "\"LABELS\"",
    "\"&\"",
    "\"!\"",
    "\"[\"",
    "\"{\"",
    "\"<=\"",
    "\"LEADING\"",
    "\"LIMIT\"",
    "\"LIST\"",
    "\"LOAD\"",
    "\"LOCAL\"",
    "\"LOOKUP\"",
    "\"(\"",
    "\"<\"",
    "\"MANAGEMENT\"",
    "\"MAP\"",
    "\"MATCH\"",
    "\"MERGE\"",
    "\"-\"",
    "\"%\"",
    "\"!=\"",
    "\"<>\"",
    "\"NAME\"",
    "\"NAMES\"",
    "\"NAN\"",
    "\"NFC\"",
    "\"NFD\"",
    "\"NFKC\"",
    "\"NFKD\"",
    "\"NEW\"",
    "\"NODE\"",
    "\"NODETACH\"",
    "\"NODES\"",
    "\"NONE\"",
    "\"NORMALIZE\"",
    "\"NORMALIZED\"",
    "\"NOT\"",
    "\"NOTHING\"",
    "\"NOWAIT\"",
    "\"null\"",
    "\"OF\"",
    "\"ON\"",
    "\"ONLY\"",
    "\"OPTIONAL\"",
    "\"OPTIONS\"",
    "\"OPTION\"",
    "\"OR\"",
    "\"ORDER\"",
    "\"OUTPUT\"",
    "\"PASSWORD\"",
    "\"PASSWORDS\"",
    "\"PATH\"",
    "\"PATHS\"",
    "\"PERIODIC\"",
    "\"PLAINTEXT\"",
    "\"+\"",
    "\"+=\"",
    "\"POINT\"",
    "\"POPULATED\"",
    "\"^\"",
    "\"REPEATABLE\"",
    "\"PRIMARY\"",
    "\"PRIMARIES\"",
    "\"PRIVILEGE\"",
    "\"PRIVILEGES\"",
    "\"PROCEDURE\"",
    "\"PROCEDURES\"",
    "\"PROPERTIES\"",
    "\"PROPERTY\"",
    "\"PROVIDER\"",
    "\"PROVIDERS\"",
    "\"?\"",
    "\"RANGE\"",
    "\"]\"",
    "\"}\"",
    "\"READ\"",
    "\"REALLOCATE\"",
    "\"REDUCE\"",
    "\"RENAME\"",
    "\"=~\"",
    "\"REL\"",
    "\"RELATIONSHIP\"",
    "\"RELATIONSHIPS\"",
    "\"REMOVE\"",
    "\"REPLACE\"",
    "\"REPORT\"",
    "\"REQUIRE\"",
    "\"REQUIRED\"",
    "\"RETURN\"",
    "\"REVOKE\"",
    "\"ROLE\"",
    "\"ROLES\"",
    "\"ROW\"",
    "\"ROWS\"",
    "\")\"",
    "\"SCAN\"",
    "\"SEC\"",
    "\"SECOND\"",
    "\"SECONDARY\"",
    "\"SECONDARIES\"",
    "\"SECONDS\"",
    "\"SEEK\"",
    "\";\"",
    "\"SERVER\"",
    "\"SERVERS\"",
    "\"SET\"",
    "\"SETTING\"",
    "\"SETTINGS\"",
    "\"shortestPath\"",
    "\"SHORTEST\"",
    "\"SHOW\"",
    "\"SIGNED\"",
    "\"SINGLE\"",
    "\"SKIP\"",
    "\"START\"",
    "\"STARTS\"",
    "\"STATUS\"",
    "\"STOP\"",
    "\"STRING\"",
    "\"SUPPORTED\"",
    "\"SUSPENDED\"",
    "\"TARGET\"",
    "\"TERMINATE\"",
    "\"TEXT\"",
    "\"THEN\"",
    "\"TIME\"",
    "\"*\"",
    "\"TIMESTAMP\"",
    "\"TIMEZONE\"",
    "\"TO\"",
    "\"TOPOLOGY\"",
    "\"TRAILING\"",
    "\"TRANSACTION\"",
    "\"TRANSACTIONS\"",
    "\"TRAVERSE\"",
    "\"TRIM\"",
    "\"true\"",
    "\"TYPE\"",
    "\"TYPED\"",
    "\"TYPES\"",
    "\"UNION\"",
    "\"UNIQUE\"",
    "\"UNIQUENESS\"",
    "\"UNWIND\"",
    "\"URL\"",
    "\"USE\"",
    "\"USER\"",
    "\"USERS\"",
    "\"USING\"",
    "\"VALUE\"",
    "\"VARCHAR\"",
    "\"VECTOR\"",
    "\"VERBOSE\"",
    "\"VERTEX\"",
    "\"WAIT\"",
    "\"WHEN\"",
    "\"WHERE\"",
    "\"WITH\"",
    "\"WITHOUT\"",
    "\"WRITE\"",
    "\"XOR\"",
    "\"YIELD\"",
    "\"ZONE\"",
    "\"ZONED\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<PART_LETTER>",
    "<ARROW_LINE>",
    "<ARROW_LEFT_HEAD>",
    "<ARROW_RIGHT_HEAD>",
    "<UNKNOWN>",
  };

}
